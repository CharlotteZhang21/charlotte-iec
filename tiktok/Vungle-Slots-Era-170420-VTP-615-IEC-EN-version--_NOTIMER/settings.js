var PiecSettings = PiecSettings || {};PiecSettings.version = "-";//========================== General Settings. Timer, ASOI, fonts =============================PiecSettings.videoOrientation = 'portrait';PiecSettings.orientationLock = 'portrait'; //Choose between "portrait", "landscape" and "none"PiecSettings.fontColor = "#fff";PiecSettings.tiktokBlueColor = "#2cfffe";PiecSettings.tiktokRedColor = "#fd406f";PiecSettings.fontFamily = "Contemporary"; //Make sure that this font is on the css and that there is a div that uses it. (preload-font div)PiecSettings.genericFontFamily = "Noto Sans";//PiecSettings.videoFramerate = 25; //REMOVE if you want to write in seconds.PiecSettings.initialScript = "tutorial";PiecSettings.script = {    "tutorial": {        "video": "video.mp4",        "from": 0,        "to": 1.22,        "loop": false,        "hud": [            {tag: 'cta-rectangle', at: 0, effect: 'fadeIn', },            {tag: 'cta-text', at: 0, effect: 'fadeIn', },            {tag: 'dockBg', at: 0, show: true, },            {tag: 'target', at: 0, show: true, },            {tag: 'tank', at: 0, show: true,},            {tag: 'tank', htmlTag: 'middle', at: 0.45, show: true,},            {tag: 'hand', at: 0, effect: 'fadeIn'},            {tag: 'tank', htmlTag: 'target-tutorial', at: 0.9, show: true,},        ],        "autoplay": {            "script": "tutorial-2",        },    },    "tutorial-2": {        "video": "video.mp4",        "from": 18.5,        "to": 18.8,        "loop": true,        interactions: [            { from: 18.5, typeOfInteraction: 'tap', htmlTag: 'cta-full-screen', onSuccess: 'tutorial-changed', successConsequences: 'tapped=true'},                    ],        "hud": [            { tag: 'hand', at: 18.5, effect: 'tap', triggerOnce: true},            { tag: 'tutorial-text', at: 18.5, effect: 'fadeIn', triggerOnce: true},            { tag: 'darkOverlay', at: 18.5, effect: 'fadeIn', triggerOnce: true}        ],        "autoplay": {            after: 4000,            "script": "tutorial-changed",        },    },    "tutorial-changed": {        "video": "video.mp4",        "from": 20,        "to": 20.6,        "loop": true,        audios: [            { tag: 'audio2', src: 'achievement.mp3', at: 20, loop: false, play: true, triggerOnce: true, conditions: 'tapped==true' },        ],        "hud": [            { tag: 'tank', at: 20, htmlTag: 'destination-tutorial', triggerOnce: true},            { tag: 'tank', at: 20.5, effect: 'fadeOut', triggerOnce: true},            { tag: 'hand', at: 20, effect: 'fadeOut', triggerOnce: true},            { tag: 'tutorial-text', at: 20, effect: 'fadeOut', triggerOnce: true},            { tag: 'goodJob-text', at: 20, effect: 'scaleIn', triggerOnce: true},        ],        "autoplay": {            after: 1000,            "script": "tutorial-changed-1",        },    },    "tutorial-changed-1": {        "video": "video.mp4",        "from": 20,        "to": 20.6,        "loop": true,        "hud": [                        { tag: '3', at: 20, effect: 'scaleIn', triggerOnce: true},            { tag: '3', at: 20.5, effect: 'fadeOut', triggerOnce: true},        ],        "autoplay": {            after: 1000,            "script": "tutorial-changed-2",        },    },    "tutorial-changed-2": {        "video": "video.mp4",        "from": 20,        "to": 20.6,        "loop": true,        "hud": [            { tag: '2', at: 20, effect: 'scaleIn', triggerOnce: true},            { tag: '2', at: 20.5, effect: 'fadeOut', triggerOnce: true},            {tag: 'perfect-counter', at: 20, effect: 'slideInDown', triggerOnce: true},            {tag: 'good-counter', at: 20, effect: 'slideInDown', triggerOnce: true},            {tag: 'miss-counter', at: 20, effect: 'slideInDown', triggerOnce: true},            {tag: 'perfectCounterText', at: 20, effect: 'slideInDown', triggerOnce: true},            {tag: 'goodCounterText', at: 20, effect: 'slideInDown', triggerOnce: true},            {tag: 'missCounterText', at: 20, effect: 'slideInDown', triggerOnce: true},        ],        "autoplay": {            after: 1000,            "script": "tutorial-changed-3",        },    },    "tutorial-changed-3": {        "video": "video.mp4",        "from": 20,        "to": 20.6,        "loop": true,        "hud": [            { tag: '1', at: 20, effect: 'scaleIn', triggerOnce: true},            { tag: '1', at: 20.5, effect: 'scaleOut', triggerOnce: true},        ],        "autoplay": {            after: 1000,            "script": "tutorial-changed-4",        },    },    "tutorial-changed-4": {        "video": "video.mp4",        "from": 0,        "to": 0.01,        "loop": true,        "hud": [                        {tag: 'darkOverlay', at: 0, effect: 'fadeOut'},            {tag: 'goodJob-text', at: 0, effect: 'fadeOut', triggerOnce: true},            {tag: 'tank', at: 0, show: false},        ],        "autoplay": {            after: 1000,            "script": "start",        },    },    "start": {        "video": "video.mp4",        "from": 0,        "to": 1.5,        "loop": false,        audios: [            { tag: 'audio1', src: 'bgmusic.mp3', at: 0, loop: false, play: true, triggerOnce: true },        ],        interactions: [            { from: 0, to: 1.5, typeOfInteraction: 'rhythm-minigame-changeTank', htmlTag: 'dock', onSuccess: 'changeTank', successConsequences: {good: 'good++', perfect: 'perfect++'}, failConsequences: 'miss++'},                    ],        "hud": [            {tag: 'dockBg', at: 0, show: false },            {tag: 'target', at: 0, show: false },                    ],        "autoplay": {            "script": "changeTank",        },    },    "changeTank": {        "video": "video.mp4",        "from": 1.5,        "to": 3.9,        "loop": false,        "hud": [        ],        interactions: [            { from: 1.5, to: 3.9, typeOfInteraction: 'rhythm-minigame-changeHoodie', htmlTag: 'dock', onSuccess: 'changeHoodie', successConsequences: {good: 'good++', perfect: 'perfect++'}, failConsequences: 'miss++' },        ],        "autoplay": {            "script": "changeHoodie",        },    },    "changeHoodie": {        video: 'video.mp4',        "from": 3.9,        "to": 6.52,        "loop": false,        "hud": [        ],        interactions: [            { from: 3.9, to: 6.52, typeOfInteraction: 'rhythm-minigame-shirt', htmlTag: 'dock', onSuccess: 'changeShirt', successConsequences: {good: 'good++', perfect: 'perfect++'}, failConsequences: 'miss++'},//{missed: 'heart+=0', good: 'heart+=10', perfect: 'heart+=20'}        ],        "autoplay": {            "script": "changeShirt",        },    },    "changeShirt": {        video: 'video.mp4',        "from": 6.53,        "to": 9.16,        "loop": false,        "hud": [        ],        interactions: [            { from: 6.53, to: 9.16, typeOfInteraction: 'rhythm-minigame-tshirt', htmlTag: 'dock', onSuccess: 'changeTShirt', successConsequences: {good: 'good++', perfect: 'perfect++'}, failConsequences: 'miss++' },        ],        "autoplay": {            "script": "changeTShirt",        },    },    "changeTShirt": {        video: 'video.mp4',        "from": 9.16,        "to": 10.88,        "loop": false,        "hud": [        ],        interactions: [            { from: 9.16, to: 10.88, typeOfInteraction: 'rhythm-minigame-jumper', htmlTag: 'dock', onSuccess: 'changeJumper', successConsequences: {good: 'good++', perfect: 'perfect++'}, failConsequences: 'miss++' },        ],        "autoplay": {            "script": "changeJumper",        },    },    "changeJumper": {        video: 'video.mp4',        "from": 10.88,        "to": 14.9,        "loop": false,        "hud": [        ],        "autoplay": {            "script": "teaser",        },    },    "teaser": {        "video": "video.mp4",        "from": 14.9,        "to": 18.1,        "loop": false,        "hud": [            { tag: 'darkOverlay', at: 14.9, effect:'fadeIn', triggerOnce: true},            { tag: 'final-text', at: 15.5, effect: 'scaleIn', triggerOnce: true },            { tag: 'callToAction-text', at: 16, effect: 'scaleIn' },            { tag: 'popUp', at: 16, effect: 'scaleIn'},            { tag: 'cta-full-screen', at: 14.9, show: true},            {tag: 'perfect-counter', htmlTag: 'perfect-counter-final',at: 14.9, show: true, triggerOnce: true},            {tag: 'good-counter', htmlTag: 'good-counter-final',at: 14.9, show: true, triggerOnce: true},            {tag: 'miss-counter', htmlTag: 'miss-counter-final',at: 14.9, show: true, triggerOnce: true},            {tag: 'perfectCounterText', htmlTag: 'perfect-counter-text-final', at: 15, show: true, triggerOnce: true},            {tag: 'goodCounterText', htmlTag: 'good-counter-text-final',at: 15, show: true, triggerOnce: true},            {tag: 'missCounterText', htmlTag: 'miss-counter-text-final',at: 15, show: true, triggerOnce: true},        ],        "autoplay": {            "script": "teaser-2",        },        // interactions: [            // { from: 9.16, to: 10.88, typeOfInteraction: 'rhythm-minigame-Tshirt', htmlTag: 'dock', onSuccess: 'changeShirt', successConsequences: 'heart+=20', },        // ],    },     "teaser-2": {        "video": "video.mp4",        "from": 18,        "to": 18.1,        "loop": false,        // interactions: [            // { from: 9.16, to: 10.88, typeOfInteraction: 'rhythm-minigame-Tshirt', htmlTag: 'dock', onSuccess: 'changeShirt', successConsequences: 'heart+=20', },        // ],    },};//======================================== HUD Elements ========================================PiecSettings.hudElements = {   'darkOverlay': {        src: 'dark-overlay.png',        htmlTag: 'full-screen',        anchor: { x: 0.5, y: 0.5}    },    'hand': {        src: 'hand.png',        htmlTag: 'hand',        anchor: { x: 0.5, y: 0.5 },    },    'dockBg': {        src: 'dockBg.png',        htmlTag: 'dock',        anchor: { x: 0.5, y: 0.5}    },    'target': {        src: 'target.png',        htmlTag: 'target',        anchor: { x: 0.5, y: 0.5}    },    'tank': {        src: 'tank.png',        htmlTag: 'outside',        anchor: { x: 0.5, y: 0.5}    },       'popUp': {        src: 'popup.png',        htmlTag: 'popUp',        anchor: { x: 0.5, y: 0.5}    },    '3': {        text: '3',        htmlTag: 'destination-1',        anchor: { x: 0.5, y: 0.5},        style: {            fontWeight: "bold",            fontFamily: PiecSettings.fontFamily + ", " + PiecSettings.genericFontFamily,            color: [PiecSettings.tiktokBlueColor], // if there is no gradient, leave only one color in the array            // stroke: 'black', // if there is no stroke, can delete it            // strokeThickness: 6,            shadow: {                x: 2,                y: 6,                color: 'rgb(0,0,0)',                blur: 0            }, //phaser shadow        },    },    '2': {        text: '2',        htmlTag: 'destination-1',        anchor: { x: 0.5, y: 0.5},        style: {            fontWeight: "bold",            fontFamily: PiecSettings.fontFamily + ", " + PiecSettings.genericFontFamily,            color: [PiecSettings.tiktokBlueColor], // if there is no gradient, leave only one color in the array            // stroke: 'black', // if there is no stroke, can delete it            // strokeThickness: 6,            shadow: {                x: 2,                y: 6,                color: 'rgb(0,0,0)',                blur: 0            }, //phaser shadow        },    },    '1': {        text: '1',        htmlTag: 'destination-1',        anchor: { x: 0.5, y: 0.5},        style: {            fontWeight: "bold",            fontFamily: PiecSettings.fontFamily + ", " + PiecSettings.genericFontFamily,            color: [PiecSettings.tiktokBlueColor], // if there is no gradient, leave only one color in the array            // stroke: 'black', // if there is no stroke, can delete it            // strokeThickness: 6,            shadow: {                x: 2,                y: 6,                color: 'rgb(0,0,0)',                blur: 0            }, //phaser shadow        },    },        'perfectCounterText': {        text: 'PERFECT',        htmlTag: 'perfect-counter-text',        anchor: { x: 0.5, y: 0.5},        style: {            fontWeight: "bold",            fontFamily: PiecSettings.fontFamily + ", " + PiecSettings.genericFontFamily,            color: [PiecSettings.tiktokBlueColor], // if there is no gradient, leave only one color in the array            // stroke: 'black', // if there is no stroke, can delete it            // strokeThickness: 6,            shadow: {                x: 2,                y: 6,                color: 'rgb(0,0,0)',                blur: 0            }, //phaser shadow        },    },    'goodCounterText': {        text: 'GOOD',        htmlTag: 'good-counter-text',        anchor: { x: 0.5, y: 0.5},        style: {            fontWeight: "bold",            fontFamily: PiecSettings.fontFamily + ", " + PiecSettings.genericFontFamily,            color: [PiecSettings.tiktokBlueColor], // if there is no gradient, leave only one color in the array            // stroke: 'black', // if there is no stroke, can delete it            // strokeThickness: 6,            shadow: {                x: 2,                y: 6,                color: 'rgb(0,0,0)',                blur: 0            }, //phaser shadow        },    },    'missCounterText': {        text: 'MISS',        htmlTag: 'miss-counter-text',        anchor: { x: 0.5, y: 0.5},        style: {            fontWeight: "bold",            fontFamily: PiecSettings.fontFamily + ", " + PiecSettings.genericFontFamily,            color: [PiecSettings.tiktokBlueColor], // if there is no gradient, leave only one color in the array            // stroke: 'black', // if there is no stroke, can delete it            // strokeThickness: 6,            shadow: {                x: 2,                y: 6,                color: 'rgb(0,0,0)',                blur: 0            }, //phaser shadow        },    },    'tutorial-text': {        text: 'Tap to change\n    her clothes',        htmlTag: 'tutorial-text',        anchor: { x: 0.5, y: 0.5 },        style: {            fontWeight: "bold",            fontFamily: PiecSettings.fontFamily,            color: ['#fff'], // if there is no gradient, leave only one color in the array            stroke: 'black', // if there is no stroke, can delete it            strokeThickness: 6,            shadow: {                x: 2,                y: 6,                color: 'rgb(0,0,0)',                blur: 0            }, //phaser shadow        },        // type: 'cta',    },    'goodJob-text': {        text: '    Good job!\nNow get ready!',        htmlTag: 'tutorial-text',        anchor: { x: 0.5, y: 0.5 },        style: {            fontWeight: "bold",            fontFamily: PiecSettings.fontFamily,            color: ['#fff'], // if there is no gradient, leave only one color in the array            stroke: 'black', // if there is no stroke, can delete it            strokeThickness: 6,            shadow: {                x: 2,                y: 6,                color: 'rgb(0,0,0)',                blur: 0            }, //phaser shadow        },        // type: 'cta',    },    'callToAction-text': {        text: 'WATCH MORE',        htmlTag: 'callToAction-text',        anchor: { x: 0.5, y: 0.5 },        style: {            fontWeight: "bold",            fontFamily: PiecSettings.fontFamily,            color: ['#fff'], // if there is no gradient, leave only one color in the array            stroke: 'black', // if there is no stroke, can delete it            strokeThickness: 6,            shadow: {                x: 2,                y: 6,                color: 'rgb(0,0,0)',                blur: 0            }, //phaser shadow        },        // type: 'cta',    },    'final-text': {        text: 'Final Score:',        htmlTag: 'final-text',        anchor: { x: 0.5, y: 0.5 },        style: {            fontWeight: "bold",            fontFamily: PiecSettings.fontFamily,            color: ['#fff'], // if there is no gradient, leave only one color in the array            stroke: 'black', // if there is no stroke, can delete it            strokeThickness: 6,            shadow: {                x: 2,                y: 6,                color: 'rgb(0,0,0)',                blur: 0            }, //phaser shadow        },        // type: 'cta',    },    'cta-rectangle': {        src: 'CTA.png',        htmlTag: 'cta-rectangle',        anchor: { x: 0.5, y: 0.5 },        type: 'cta',    },    'cta-text': {        text: 'DOWNLOAD',        htmlTag: 'cta-text',        autolocalise: true,        anchor: { x: 0.5, y: 0.5 },        style: {            fontWeight: "bold",            fontFamily: PiecSettings.fontFamily,            color: ['#fff'], // if there is no gradient, leave only one color in the array            stroke: 'black', // if there is no stroke, can delete it            strokeThickness: 6,            shadow: {                x: 2,                y: 6,                color: 'rgb(0,0,0)',                blur: 0            }, //phaser shadow        },        // type: 'cta',    },    'cta-full-screen': {        src: '',        htmlTag: 'cta-full-screen',        anchor: { x: 0.5, y: 0.5 },        type: 'cta',    }};//============Variables and Flags used within the Video PIEC script to apply conditions and consequences=================PiecSettings.variables = {    'perfect': {        value: 0,    },    'good': {        value: 0,    },    'miss': {        value: 0,    },     'tapped': {        value: false    }};//=================================== Collectible Component ====================================PiecSettings.collectibles = {    'perfect': {        src: 'heart.png',        htmlTag: 'coin-container',        initialValue: 0, //overwrites value in PiecSettings.variables        valueRange: { min: 0, max: 5 },        eachItemCountsAs: 1,        sounds : {            collect: 'coin-pickup.mp3',            lose: 'coin-empty.mp3',        },        counter: {            tag: 'perfect-counter',            htmlTag: 'perfect-counter',            iconText: "PERFECT",            // iconSrc: 'coinstack.png',            backgroundSrc: 'white-overlay.png', // counter's background source            // if it's a progress bar, name it the same as the name of the bar            // like: healthBar, because the fill will be automatically called healthBar-fill            style: 'number', // choose among number, rectangle_progressbar, circle_progressbar             fontStyle: { //only needed when you have a number counter                fontWeight: "bold",                fontFamily: PiecSettings.fontFamily + "," + PiecSettings.genericFontFamily,                color: [PiecSettings.tiktokRedColor], // if there is no gradient, leave only one color in the array                stroke: 'black', // if there is no stroke, can delete it                shadow: {                    x: 2,                    y: 4,                    color: 'rgb(44,255,254)',                    blur: 0                }, //phaser shadow                anchor: {                    x: .4,                    y: .5                }            }        },        onCollectEffects: ['flyToGoal'],    },    'good': {        src: 'heart.png',        htmlTag: 'coin-container',        initialValue: 0, //overwrites value in PiecSettings.variables        valueRange: { min: 0, max: 5 },        eachItemCountsAs: 1,        sounds : {            collect: 'coin-pickup.mp3',            lose: 'coin-empty.mp3',        },        counter: {            tag: 'good-counter',            htmlTag: 'good-counter',            iconText: "GOOD",            // iconSrc: 'coinstack.png',            backgroundSrc: 'white-overlay.png', // counter's background source            // if it's a progress bar, name it the same as the name of the bar            // like: healthBar, because the fill will be automatically called healthBar-fill            style: 'number', // choose among number, rectangle_progressbar, circle_progressbar             fontStyle: { //only needed when you have a number counter                fontWeight: "bold",                fontFamily: PiecSettings.fontFamily + "," + PiecSettings.genericFontFamily,                color: [PiecSettings.tiktokRedColor], // if there is no gradient, leave only one color in the array                stroke: 'black', // if there is no stroke, can delete it                shadow: {                    x: 2,                    y: 4,                    color: 'rgb(44,255,254)',                    blur: 0                }, //phaser shadow                anchor: {                    x: .4,                    y: .5                }            }        },        onCollectEffects: ['flyToGoal'],    },    'miss': {        src: 'heart.png',        htmlTag: 'coin-container',        initialValue: 0, //overwrites value in PiecSettings.variables        valueRange: { min: 0, max: 5 },        eachItemCountsAs: 1,        sounds : {            collect: 'coin-pickup.mp3',            lose: 'coin-empty.mp3',        },        counter: {            tag: 'miss-counter',            htmlTag: 'miss-counter',            iconText: "MISS",            // iconSrc: 'coinstack.png',            backgroundSrc: 'white-overlay.png', // counter's background source            // if it's a progress bar, name it the same as the name of the bar            // like: healthBar, because the fill will be automatically called healthBar-fill            style: 'number', // choose among number, rectangle_progressbar, circle_progressbar             fontStyle: { //only needed when you have a number counter                fontWeight: "bold",                fontFamily: PiecSettings.fontFamily + "," + PiecSettings.genericFontFamily,                color: [PiecSettings.tiktokRedColor], // if there is no gradient, leave only one color in the array                stroke: 'black', // if there is no stroke, can delete it                shadow: {                    x: 2,                    y: 4,                    color: 'rgb(44,255,254)',                    blur: 0                }, //phaser shadow                anchor: {                    x: .4,                    y: .5                }            }        },        onCollectEffects: ['flyToGoal'],    },};//================================= Mini Games (e.g. projectile) ===============================PiecSettings.minigames = {    'rhythm-minigame-changeTank': {        type: 'rhythm-minigame',        src: 'tank.png', // if it's animation, the src links to the PiecSettings.pngAnimations        htmlTag: 'symbol-container', // define the size of the symbol, e.g. the clothes in tiktok game        isAnimation: false, // is symbol animated        typeOfInteraction: 'tap', // what kind of interaction is it 'swipe?' 'tap'?        interactionContainer: 'cta-full-screen', // where can you tap        // failAni: 'projectile-explosion', // if there is no, then delete or leave null        successEffect: 'explodeInCircle', // play a effect when it's hit correctly. remove if you dont need, if it's pngAnimations         // successAni: 'projectile-explosion', // if there is no, then delete or leave null        initialTimeMargin: 1000, //1s = 1000,        endTimeMargin: 100,        particles: {            effect: 'shootLeft', //one particle at a time, with a random position            htmlTag: "heart", //specifies default size of particles            src: ["heart.png"],        },        sounds: {            hit: 'achievement.mp3',//when success            miss: 'wrong.mp3',        },        counter: {            tag: 'rhythmDock',             htmlTag: 'dock', //define the dock where the bg is            targetTag: 'target', //define where the target area is            backgroundSrc: 'belt.png', // the transporting belt            iconSrc: 'target.png', // the target circle            iconFlyToContainer: 'destination-1', // the symbol fly animation        },        textFeedback:{ //remove it if you don't need a text feedback            container: 'destination-1', // text generates from which container            fontStyle: {                fontWeight: "bold",                fontFamily: PiecSettings.fontFamily,                color: ['#fc3564'], // if there is no gradient, leave only one color in the array                stroke: 'black', // if there is no stroke, can delete it                strokeThickness: 6,                shadow: {                    x: 2,                    y: 6,                    color: 'rgb(44,255,254)',                    blur: 0                }, //phaser shadow                anchor: {                    x: 0.5,                    y: 1,                }            },        },    },    'rhythm-minigame-changeHoodie': {        type: 'rhythm-minigame',        src: 'hoodie.png', // if it's animation, the src links to the PiecSettings.pngAnimations        htmlTag: 'symbol-container', // define the size of the symbol, e.g. the clothes in tiktok game        isAnimation: false, // is symbol animated        typeOfInteraction: 'tap', // what kind of interaction is it 'swipe?' 'tap'?        interactionContainer: 'cta-full-screen', // where can you tap        // failAni: 'projectile-explosion', // if there is no, then delete or leave null        successEffect: 'explodeInCircle', // play a effect when it's hit correctly. remove if you dont need, if it's pngAnimations         // successAni: 'projectile-explosion', // if there is no, then delete or leave null        initialTimeMargin: 1600, //1s = 1000,        endTimeMargin: 500,        particles: {            effect: 'spawn', //one particle at a time, with a random position            htmlTag: "heart", //specifies default size of particles            src: ["heart.png"],        },        sounds: {            hit: 'achievement.mp3',//when success            miss: 'wrong.mp3',        },        counter: {            tag: 'rhythmDock',             htmlTag: 'dock', //define the dock where the bg is            targetTag: 'target', //define where the target area is            backgroundSrc: 'belt.png', // the transporting belt            iconSrc: 'target.png', // the target circle            iconFlyToContainer: 'destination-1', // the symbol fly animation        },        textFeedback:{ //remove it if you don't need a text feedback            container: 'destination-1', // text generates from which container            fontStyle: {                fontWeight: "bold",                fontFamily: PiecSettings.fontFamily,                color: ['#fc3564'], // if there is no gradient, leave only one color in the array                stroke: 'black', // if there is no stroke, can delete it                strokeThickness: 6,                shadow: {                    x: 2,                    y: 6,                    color: 'rgb(44,255,254)',                    blur: 0                }, //phaser shadow                anchor: {                    x: 0.5,                    y: 1,                }            },        },    },    'rhythm-minigame-shirt': {        type: 'rhythm-minigame',        src: 'shirt.png', // if it's animation, the src links to the PiecSettings.pngAnimations        htmlTag: 'symbol-container', // define the size of the symbol, e.g. the clothes in tiktok game        isAnimation: false, // is symbol animated        typeOfInteraction: 'tap', // what kind of interaction is it 'swipe?' 'tap'?        interactionContainer: 'cta-full-screen', // where can you tap        // failAni: 'projectile-explosion', // if there is no, then delete or leave null        successEffect: 'explodeInCircle', // play a effect when it's hit correctly. remove if you dont need, if it's pngAnimations         // successAni: 'projectile-explosion', // if there is no, then delete or leave null        initialTimeMargin: 2000, //1s = 1000,        endTimeMargin: 200,        particles: {            effect: 'spawn', //one particle at a time, with a random position            htmlTag: "heart", //specifies default size of particles            src: ["heart.png"],        },        sounds: {            hit: 'achievement.mp3',//when success            miss: 'wrong.mp3',        },        counter: {            tag: 'rhythmDock',             htmlTag: 'dock', //define the dock where the bg is            targetTag: 'target', //define where the target area is            backgroundSrc: 'belt.png', // the transporting belt            iconSrc: 'target.png', // the target circle            iconFlyToContainer: 'destination-1', // the symbol fly animation        },        textFeedback:{ //remove it if you don't need a text feedback            container: 'destination-1', // text generates from which container            fontStyle: {                fontWeight: "bold",                fontFamily: PiecSettings.fontFamily,                color: ['#fc3564'], // if there is no gradient, leave only one color in the array                stroke: 'black', // if there is no stroke, can delete it                strokeThickness: 6,                shadow: {                    x: 2,                    y: 6,                    color: 'rgb(44,255,254)',                    blur: 0                }, //phaser shadow                anchor: {                    x: 0.5,                    y: 1,                }            },        },    },    'rhythm-minigame-tshirt': {        type: 'rhythm-minigame',        src: 'tshirt.png', // if it's animation, the src links to the PiecSettings.pngAnimations        htmlTag: 'symbol-container', // define the size of the symbol, e.g. the clothes in tiktok game        isAnimation: false, // is symbol animated        typeOfInteraction: 'tap', // what kind of interaction is it 'swipe?' 'tap'?        interactionContainer: 'cta-full-screen', // where can you tap        // failAni: 'projectile-explosion', // if there is no, then delete or leave null        successEffect: 'explodeInCircle', // play a effect when it's hit correctly. remove if you dont need, if it's pngAnimations         // successAni: 'projectile-explosion', // if there is no, then delete or leave null        initialTimeMargin: 2000, //1s = 1000,        endTimeMargin: 200,        particles: {            effect: 'spawn', //one particle at a time, with a random position            htmlTag: "heart", //specifies default size of particles            src: ["heart.png"],        },        sounds: {            hit: 'achievement.mp3',//when success            miss: 'wrong.mp3',        },        counter: {            tag: 'rhythmDock',             htmlTag: 'dock', //define the dock where the bg is            targetTag: 'target', //define where the target area is            backgroundSrc: 'belt.png', // the transporting belt            iconSrc: 'target.png', // the target circle            iconFlyToContainer: 'destination-1', // the symbol fly animation        },        textFeedback:{ //remove it if you don't need a text feedback            container: 'destination-1', // text generates from which container            fontStyle: {                fontWeight: "bold",                fontFamily: PiecSettings.fontFamily,                color: ['#fc3564'], // if there is no gradient, leave only one color in the array                stroke: 'black', // if there is no stroke, can delete it                strokeThickness: 6,                shadow: {                    x: 2,                    y: 6,                    color: 'rgb(44,255,254)',                    blur: 0                }, //phaser shadow                anchor: {                    x: 0.5,                    y: 1,                }            },        },    },    'rhythm-minigame-jumper': {        type: 'rhythm-minigame',        src: 'jumper.png', // if it's animation, the src links to the PiecSettings.pngAnimations        htmlTag: 'symbol-container', // define the size of the symbol, e.g. the clothes in tiktok game        isAnimation: false, // is symbol animated        typeOfInteraction: 'tap', // what kind of interaction is it 'swipe?' 'tap'?        interactionContainer: 'cta-full-screen', // where can you tap        // failAni: 'projectile-explosion', // if there is no, then delete or leave null        successEffect: 'explodeInCircle', // play a effect when it's hit correctly. remove if you dont need, if it's pngAnimations         // successAni: 'projectile-explosion', // if there is no, then delete or leave null        initialTimeMargin: 1000, //1s = 1000,        endTimeMargin: 100,        particles: {            effect: 'spawn', //one particle at a time, with a random position            htmlTag: "heart", //specifies default size of particles            src: ["heart.png"],        },        sounds: {            hit: 'achievement.mp3',//when success            miss: 'wrong.mp3',        },        counter: {            tag: 'rhythmDock',             htmlTag: 'dock', //define the dock where the bg is            targetTag: 'target', //define where the target area is            backgroundSrc: 'belt.png', // the transporting belt            iconSrc: 'target.png', // the target circle            iconFlyToContainer: 'destination-1', // the symbol fly animation        },        textFeedback:{ //remove it if you don't need a text feedback            container: 'destination-1', // text generates from which container            fontStyle: {                fontWeight: "bold",                fontFamily: PiecSettings.fontFamily,                color: ['#fc3564'], // if there is no gradient, leave only one color in the array                stroke: 'black', // if there is no stroke, can delete it                strokeThickness: 6,                shadow: {                    x: 2,                    y: 6,                    color: 'rgb(44,255,254)',                    blur: 0                }, //phaser shadow                anchor: {                    x: 0.5,                    y: 1,                }            },        },    },};//===================================== Png Animations =========================================PiecSettings.pngAnimations = {}PiecSettings.defaultLang = "en";PiecSettings.translations = {    'DOWNLOAD': {        en: "DOWNLOAD",        ja: "ダウンロード",        ko: "다운로드",        zh: "下载",        de: "DOWNLOAD",        fr: "Télécharger",        it: "Scarica",        es: "Descargar",        pt: "Baixar",        ca: "Descarregar",        ru: "Скачать",        tr: "Indir",        nl: "DOWNLOAD",        sv: "Ladda ner",        id: "DOWNLOAD",        ro: "Descărcare",        ar: "تحميل",        uk: "скачати",        no: "Nedlasting",        nb: "Nedlasting",        nn: "Nedlasting",        he: "הורד",        ms: "ഡൗൺലോഡ്",        th: "ดาวน์โหลด",        pl: "Pobierz",        be: "спампаваць",        el: "κατεβάστε",        bg: "изтегляне",        da: "Hent",        sr: "довнлоад",        kk: "жүктеу",        vi: "Tải về",        hr: "zbirka",        km: "ទាញយក",        sq: "Shkarko",        sl: "prenesi",        lt: "parsisiųsti",        az: "yükləyin",        zu: "ukulanda",        ga: "íoslódáil",        is: "sækja",        hu: "Letöltés",        lv: "lejupielādēt",        ka: "ჩამოტვირთვა",        mt: "niżżel",        et: "lae alla",        ne: "डाउनलोड",        bn: "ডাউনলোড",        eu: "deskargatu",        fi: "ladata",        sw: "kupakua",    },    'Play!': {        en: "Play!",        ja: "遊びます!",        ko: "놀이!",        zh: "玩!",        de: "abspielen!",        fr: "jouer!",        it: "giocare!",        es: "¡Jugar!",        pt: "Toque!",        ca: "Jugar!",        ru: "играть!",        tr: "oyun!",        nl: "spelen!",        sv: "spela!",        id: "bermain!",        ro: "Joaca!",        ar: "لعب!",        uk: "грати!",        no: "spille!",        nb: "spille!",        nn: "spille!",        he: "לְשַׂחֵק!",        ms: "Bermain!",        th: "เล่น!",        pl: "Grać!",        be: "Гуляць!",        el: "Παίζω!",        bg: "Играйте!",        da: "Spille!",        sr: "Игра!",        kk: "Ойнайық!",        vi: "Chơi!",        hr: "Igra!",        km: "លេង!",        sq: "Luaj!",        sl: "Igraj!",        lt: "Žaisti!",        az: "Oynamaq!",        zu: "Dlala!",        ga: "Seinn!",        is: "Leika!",        hu: "Játék!",        lv: "Spēlēt!",        ka: "ითამაშეთ!",        mt: "Play!",        et: "Mängi!",        ne: "खेल्नु!",        bn: "খেলুন!",        eu: "Jokatu!",        fi: "Pelata!",        sw: "Jaribu!",    },    'Play': {        en: "Play",        ja: "遊びます",        ko: "놀이",        zh: "玩",        de: "abspielen",        fr: "jouer",        it: "giocare",        es: "¡Jugar",        pt: "Toque",        ca: "Jugar",        ru: "играть",        tr: "oyun",        nl: "spelen",        sv: "spela",        id: "bermain",        ro: "Joaca",        ar: "لعب",        uk: "грати",        no: "spille",        nb: "spille",        nn: "spille",        he: "לְשַׂחֵק",        ms: "Bermain",        th: "เล่น",        pl: "Grać",        be: "Гуляць",        el: "Παίζω",        bg: "Играйте",        da: "Spille",        sr: "Игра",        kk: "Ойнайық",        vi: "Chơi",        hr: "Igra",        km: "លេង",        sq: "Luaj",        sl: "Igraj",        lt: "Žaisti",        az: "Oynamaq",        zu: "Dlala",        ga: "Seinn",        is: "Leika",        hu: "Játék",        lv: "Spēlēt",        ka: "ითამაშეთ",        mt: "Play",        et: "Mängi",        ne: "खेल्नु",        bn: "খেলুন",        eu: "Jokatu",        fi: "Pelata",        sw: "Jaribu",    }};PiecSettings.version = '-';
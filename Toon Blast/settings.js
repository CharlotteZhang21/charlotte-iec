var PiecSettings = PiecSettings || {};//===== when assets are loaded, we can use the name without suffix which indicates the file type//===== for example //===== bg.jpg will be used as new Phaser.Sprite(this.game, 0, 0, 'bg')PiecSettings.assets = [    'bg.jpg',    'bg-portrait.jpg',    'bg-landscape.jpg',    'cta-bg.png',    'hand.png',    'cloud-1.png',    'cloud-2.png',    'cloud-3.png',    'cooper.png',    'bruno.png',    'wally.png',    'anvil.png',    'star.png',    'block_yellow.png',    'block_orange.png',    'block_green.png',    'block_red.png',    'block_purple.png',    'block_blue.png',    'blue-cube.png',    'yellow-cube.png',    'orange-cube.png',    'blue-cube.png',    'red-cube.png',    'purple-cube.png',    'smoke.png',    'crack.png',    'characters-final.png',    'background-counter-icon.png',    'background-counter.png',    'background-counter-fill.png',    'surprise.png',    'question.png',    'logo.png'];PiecSettings.fontFamily = 'myFont';PiecSettings.blocks = ['yellow', 'orange', 'green', 'red', 'purple', 'blue'];PiecSettings.blockArraySize = {    portrait: [5, 3, 2, 2, 5, 7],    landscape: [7, 5, 4, 2, 2, 2, 3, 6, 7],}//======================================== CTA TEXT ========================================PiecSettings.ctaButtonText = {    text: 'Play!',    autolocalise: true,    container: 'cta-text',    style: {        fontWeight: "bold",        fontFamily: PiecSettings.fontFamily,        color: ['#fffffb', '#fff3af'], // if there is no gradient, leave only one color in the array        stroke: '#5f850b', // if there is no stroke, can delete it        strokeThickness: 6,        shadow: {            x: 2,            y: 6,            color: 'rgb(58,82,8)',            blur: 0        }, //phaser shadow    },    anchor: {        x: 0.5,        y: 0.5    }}PiecSettings.miniGameArgs = {        typeOfInteraction: 'tap', //choose between "tap", "scratch"        htmlTag: 'powerup-container', //active area, that should be tapped!        initialValue: 0, //overwrites value in PiecSettings.variables        valueIncrementPerInteraction: 2,        valueDecreasePerQuarterSecond: 0,        checkpoints: [50, 100], //This is [100] by default, meaning there's only 1, and it's at the very end of the fill container        //Each number represents a percentage of the total % of the fill width        //This is 1 by default. If using more than 1, there will be more than 1 success possibility        valueRange: { min: 0, max: 20 },        playCheckpointOnArrival: true,        sounds: {        interact: 'pop.mp3',        },        particles: {            effect: 'glitterBurst', //one particle at a time, with a random position            htmlTag: "particle-container", //specifies default size of particles            // src: ["glitter01.png", "glitter02.png", "glitter03.png","glitter04.png"],            src: [                'blue-cube.png',                'yellow-cube.png',                'orange-cube.png',                'blue-cube.png',                'red-cube.png',                'purple-cube.png',            ],        },        tutorial: { //Remove if no tutorial needed            tagName: "hand", //HUD Element for tutorial hand            htmlTagSpawn: "powerup-container-spawn", //If not specified, template will use default htmlTag container        },        cancelScaleAni: true,        counter: {            tag: 'powerup-counter',            htmlTag: 'powerup-counter',            htmlTagFill: 'powerup-counter-fill', //optional. If nothing is specified, it wil just default a position within the parent container            htmlTagIcon: 'powerup-counter-icon', //optional            htmlTagText: 'powerup-counter-text', //optional            iconSrc: 'background-counter-icon',            backgroundSrc: 'background-counter', // counter's background source            fillSrc: 'background-counter-fill',            style: 'rectangle_progressbar', // choose among number, rectangle_progressbar, circle_progressbar         },    },    //======================================== PNG ANIMATION EXAMPLE ========================================    // PiecSettings.pngAnimations = [    //     { // 1    //         src: 'coin-animation.png',    //         spriteWidth: 714/7,    //         spriteHeight: 102/1,    //         spriteNumber: 7,    //         loops: 1,    //         delay: 0,    //         fps: 24,    //         scale: 1,    //         isReversed: false,    //     }    // ];    PiecSettings.translations = {        'Play!': {            en: "Play!",            ja: "今すぐプレイ!",            ko: "지금 플레이!",            zh: "开始游戏!",            'zh-traditional': '馬上開始!',            de: "Jetzt spielen!",            fr: "Jouer!",            it: "Gioca ora!",            es: "Juega ya!",            pt: "Joga Já!",            ca: "Jugar!",            ru: "играть!",            tr: "oyun!",            nl: "spelen!",            sv: "spela!",            id: "bermain!",            ro: "Joaca!",            ar: "لعب!",            uk: "грати!",            no: "spille!",            nb: "spille!",            nn: "spille!",            he: "לְשַׂחֵק!",            ms: "Bermain!",            th: "เล่น!",            pl: "Grać!",            be: "Гуляць!",            el: "Παίξτε τώρα!",            bg: "Играйте!",            da: "Spille!",            sr: "Игра!",            kk: "Ойнайық!",            vi: "Chơi!",            hr: "Igra!",            km: "លេង!",            sq: "Luaj!",            sl: "Igraj!",            lt: "Žaisti!",            az: "Oynamaq!",            zu: "Dlala!",            ga: "Seinn!",            is: "Leika!",            hu: "Játék!",            lv: "Spēlēt!",            ka: "ითამაშეთ!",            mt: "Play!",            et: "Mängi!",            ne: "खेल्नु!",            bn: "খেলুন!",            eu: "Jokatu!",            fi: "Pelata!",            sw: "Jaribu!",        }    };
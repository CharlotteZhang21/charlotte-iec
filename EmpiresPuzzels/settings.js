var PiecSettings = PiecSettings || {};//===== when assets are loaded, we can use the name without suffix which indicates the file type//===== for example //===== bg.jpg will be used as new Phaser.Sprite(this.game, 0, 0, 'bg')PiecSettings.assets = [    'bg.jpg',    'cta-bg.png',    'hand.png',    'board-bg.png',    '1.png', // red    '2.png', // blue    '3.png', // yellow    '4.png', // green    '5.png', // purple    '1_army.png',    '2_army.png',    '3_army.png',    '4_army.png',    '5_army.png',    'enemy.png',    '1_match4.png',    '1_match5.png',    '2_match4.png',    '2_match5.png',    '3_match4.png',    '3_match5.png',    '4_match4.png',    '4_match5.png',    '5_match4.png',    '5_match5.png',    'hero-0.png',    'hero-1.png',    'hero-2.png',    // 'circle.png',    'life-bar.png',    'life-bar-fill.png',    'hero-bar.png',    'hero-bar-fill.png',    'hero-energy.png',    'hero-energy-fill.png',    'colorbomb_ray.png',];PiecSettings.minions = true; // choose if there're milionsPiecSettings.blockColors = {    '1': 16744703,    '2': 0X1c7eea,    '3': 0Xfbe16c,    '4': 0X70d35e,    '5': 0X550b7a,};//check how much danmage of different colorsPiecSettings.danmageAttributes = {    '1': 10,    '2': 10,    '3': 10,    '4': 10,    '5': 10,},PiecSettings.heroAttributes = [    {        colorType: 4,        src: 'hero-0',        container: 'hero-0',        weapon: ''    }, // colorType : heros color - to match the skills and candies' color 4: green 3: yellow 2: blue    {        colorType: 3,        src: 'hero-1',        container: 'hero-1',        weapon: 'sword',    },    {        colorType: 2,        src: 'hero-2',        container: 'hero-2',        weapon: 'wand'    },];PiecSettings.enemies = [    {        src: 'enemy',        container: 'enemy-0',        anchor: {            x: 0.5,            y: 1        }        },    {        src: 'enemy',        container: 'enemy-1',        anchor: {            x: 0.5,            y: 1        }        },    {        src: 'enemy',        container: 'enemy-2',        anchor: {            x: 0.5,            y: 1        }        }];PiecSettings.lifeCounters = {    'enemy': {        tag: 'enemyBar',        htmlTag: 'enemy-life-counter',        initialValue: 100,        maxValue: 100,        minValue: 0,        // htmlTagFill: 'powerup-counter-fill', //optional. If nothing is specified, it wil just default a position within the parent container        // htmlTagIcon: 'powerup-counter-icon', //optional        // htmlTagText: 'powerup-counter-text', //optional        // iconSrc: 'background-counter-dragon-icon-2.png',        backgroundSrc: 'life-bar', // counter's background source        // fillSrc: 'background-counter-dragon-fill-2.png',        style: 'rectangle_progressbar', // choose among number, rectangle_progressbar, circle_progressbar     },    'hero-health': {        tag: 'heroBar',        htmlTag: 'enemy-life-counter',        initialValue: 100,        maxValue: 100,        minValue: 0,        // htmlTagFill: 'powerup-counter-fill', //optional. If nothing is specified, it wil just default a position within the parent container        // htmlTagIcon: 'powerup-counter-icon', //optional        // htmlTagText: 'powerup-counter-text', //optional        // iconSrc: 'background-counter-dragon-icon-2.png',        backgroundSrc: 'hero-bar', // counter's background source        // fillSrc: 'background-counter-dragon-fill-2.png',        style: 'rectangle_progressbar', // choose among number, rectangle_progressbar, circle_progressbar     },    'hero-energy': {        tag: 'heroBar',        htmlTag: 'enemy-life-counter',        initialValue: 0,        maxValue: 100,        minValue: 0,        // htmlTagFill: 'powerup-counter-fill', //optional. If nothing is specified, it wil just default a position within the parent container        // htmlTagIcon: 'powerup-counter-icon', //optional        // htmlTagText: 'powerup-counter-text', //optional        // iconSrc: 'background-counter-dragon-icon-2.png',        backgroundSrc: 'hero-energy', // counter's background source        // fillSrc: 'background-counter-dragon-fill-2.png',        style: 'rectangle_progressbar', // choose among number, rectangle_progressbar, circle_progressbar     },};PiecSettings.fontFamily = 'myFont';PiecSettings.genericFontFamily = "Noto Sans";PiecSettings.blocksFallDirection = 'up';//1 red//2 blue//3 yellow//4 green//5 purplePiecSettings.fixedBoard = 0;PiecSettings.boards = [    [ //0 is reserved for an empty tile        [1, 2, 4, 2, 3, 2],        [2, 4, 2, 3, 2, 4],        [4, 2, 3, 2, 4, 2],        [2, 3, 2, 4, 2, 1],    ],    [ //0 is reserved for an empty tile        [3, 2, 3, 2, 3, 2],        [2, 3, 2, 3, 2, 3],        [3, 2, 3, 2, 3, 2],        [2, 3, 2, 3, 2, 3],    ],];PiecSettings.hand = [    [        [2, 2],        [2, 3]    ],    [        [2, 2],        [2, 3]    ],    [        [1, 2],        [2, 2]    ],    [        [1, 2],        [2, 2]    ],    [        [2, 2],        [2, 3]    ],    [        [2, 2],        [2, 3]    ],    [        [2, 2],        [2, 3]    ],    [        [2, 2],        [2, 3]    ],    [        [2, 2],        [2, 3]    ],    [        [1, 2],        [2, 2]    ],];PiecSettings.boards_l = [ //Landscape boards    [        [1, 2, 3, 1, 2, 3, 1, 2],        [3, 1, 2, 3, 8, 2, 3, 1],        [2, 3, 1, 8, 3, 1, 2, 3],        [1, 2, 3, 1, 2, 3, 1, 2],    ],    [        [3, 6, 3, 6, 3, 6, 3, 6],        [6, 3, 6, 3, 6, 3, 6, 3],        [3, 6, 3, 8, 8, 6, 3, 6],        [6, 3, 6, 3, 6, 3, 6, 3],    ],    [        [1, 7, 5, 1, 7, 5],        [7, 5, 8, 8, 5, 1],        [5, 1, 7, 5, 1, 7],    ],    [        [6, 1, 3, 3, 1, 6],        [1, 3, 8, 8, 3, 1],        [6, 1, 3, 3, 1, 6],    ],    [        [1, 3, 1, 3, 1, 3, 1, 3],        [3, 2, 4, 2, 4, 2, 4, 1],        [1, 4, 2, 8, 8, 4, 2, 3],        [3, 1, 3, 1, 3, 1, 3, 1],    ],    [        [1, 4, 1, 4, 1, 4, 1, 4],        [4, 1, 4, 1, 4, 1, 4, 1],        [1, 4, 1, 8, 8, 4, 1, 4],        [4, 1, 4, 1, 4, 1, 4, 1],    ],    [        [3, 5, 6, 3, 5, 6],        [5, 6, 8, 8, 6, 3],        [6, 3, 5, 6, 3, 5],    ],    [        [2, 3, 2, 3, 2, 3, 2, 3],        [3, 2, 3, 2, 3, 8, 3, 2],        [2, 3, 8, 3, 2, 3, 2, 3],        [3, 2, 3, 2, 3, 2, 3, 2],    ],    [        [1, 3, 1, 3, 1, 3, 1, 3],        [3, 1, 8, 1, 3, 1, 3, 1],        [1, 3, 1, 3, 1, 8, 1, 3],        [3, 1, 3, 1, 3, 1, 3, 1],    ],    [        [2, 1, 3, 3, 1, 2],        [1, 3, 8, 8, 3, 1],        [2, 1, 3, 3, 1, 2],    ],];PiecSettings.hand_l = [    [        [3, 2],        [3, 1]    ],];PiecSettings.chances = [    //red, blue, yellow, green, purple    [0.1, 0.25, 0.25, 0.25, 0.15],    [0.1, 0.25, 0.3, 0.25, 0.1],];PiecSettings.chances_l = [    [0.3, 0.3, 0.15, 0.15, 0, 0, 0.1],    [0, 0, 0.33, 0, 0.33, 0.34, 0],    [0.3, 0, 0.3, 0, 0.3, 0.1, 0],    [0.35, 0, 0.3, 0, 0, 0.35, 0],    [0.3, 0.2, 0.3, 0.2, 0, 0, 0],    [0.34, 0, 0.33, 0.33, 0, 0, 0],    [0, 0, 0.33, 0, 0.33, 0.34, 0],    [0.25, 0.25, 0.25, 0, 0.25, 0, 0],    [0.25, 0.25, 0.25, 0, 0.25, 0, 0],    [0.3, 0.3, 0.3, 0.1, 0, 0, 0],];//======================================== CTA TEXT ========================================PiecSettings.ctaButtonText = {    text: 'Play Now!',    autolocalise: true,    container: 'cta-text',    style: {        fontWeight: "bold",        fontFamily: PiecSettings.fontFamily,        color: ['#ffe200'], // if there is no gradient, leave only one color in the array        stroke: '#531508', // if there is no stroke, can delete it        strokeThickness: 6,        // shadow: {        //     x: 2,        //     y: 6,        //     color: 'rgb(0,0,0)',        //     blur: 0        // }, //phaser shadow    },    anchor: {        x: 0.5,        y: 0.5    }};//======================================== Other Text =====================================PiecSettings.hurtText = {    text: '',    container: 'cta-text',    style: {        fontWeight: "bold",        fontFamily: PiecSettings.fontFamily,        color: ['#ff8900', '#ffb008'], // if there is no gradient, leave only one color in the array        stroke: '#531508', // if there is no stroke, can delete it        strokeThickness: 1,    },    anchor: {        x: 0.5,        y: 0.5    }}PiecSettings.healText = {    text: '1200',    container: 'cta-text',    style: {        fontWeight: "bold",        fontFamily: PiecSettings.fontFamily,        color: ['#53a93e'], // if there is no gradient, leave only one color in the array        stroke: '#53a93e', // if there is no stroke, can delete it        strokeThickness: 1,    },    anchor: {        x: 0.5,        y: 0.5    }}PiecSettings.comboText = {    text: '',    container: 'combo-box',    style: {        fontWeight: "bold",        fontFamily: PiecSettings.fontFamily,        color: ['#ff8900', '#ffb008'], // if there is no gradient, leave only one color in the array        stroke: '#531508', // if there is no stroke, can delete it        strokeThickness: 1,    },    anchor: {        x: 0.5,        y: 0.5    }}PiecSettings.victoryText = {    text: 'VICTORY',    container: 'victory-text',    style: {        fontWeight: "bold",        fontFamily: PiecSettings.fontFamily,        color: ['#ff8900', '#ffb008'], // if there is no gradient, leave only one color in the array        stroke: '#531508', // if there is no stroke, can delete it        strokeThickness: 1,    },    anchor: {        x: 0.5,        y: 0.5    }}//======================================== PNG ANIMATION EXAMPLE ========================================PiecSettings.pngAnimations = {    'can_attack_ani': { // 1        src: 'can_attack_ani.png',        spriteWidth: 462 / 3,        spriteHeight: 594 / 3,        spriteNumber: 9,        loops: -1,        delay: 0,        fps: 15,        scale: 1,        persistent: true,        isReversed: false,    }};PiecSettings.translations = {    'Play Now!': {        en: "Play Now!",        ja: "今すぐプレイ!",        ko: "지금 플레이!",        zh: "开始游戏!",        'zh-traditional': '馬上開始!',        de: "Jetzt spielen!",        fr: "Jouer!",        it: "Gioca ora!",        es: "Juega ya!",        pt: "Joga Já!",        ca: "Jugar!",        ru: "играть!",        tr: "oyun!",        nl: "spelen!",        sv: "spela!",        id: "bermain!",        ro: "Joaca!",        ar: "لعب!",        uk: "грати!",        no: "spille!",        nb: "spille!",        nn: "spille!",        he: "לְשַׂחֵק!",        ms: "Bermain!",        th: "เล่น!",        pl: "Grać!",        be: "Гуляць!",        el: "Παίξτε τώρα!",        bg: "Играйте!",        da: "Spille!",        sr: "Игра!",        kk: "Ойнайық!",        vi: "Chơi!",        hr: "Igra!",        km: "លេង!",        sq: "Luaj!",        sl: "Igraj!",        lt: "Žaisti!",        az: "Oynamaq!",        zu: "Dlala!",        ga: "Seinn!",        is: "Leika!",        hu: "Játék!",        lv: "Spēlēt!",        ka: "ითამაშეთ!",        mt: "Play!",        et: "Mängi!",        ne: "खेल्नु!",        bn: "খেলুন!",        eu: "Jokatu!",        fi: "Pelata!",        sw: "Jaribu!",    }};